read -formal ./rtl/design/define.v \
./rtl/design/top_ridecore.v \
./rtl/design/alloc_issue_ino.v \
./rtl/design/search_be.v \
./rtl/design/srcsel.v  \
./rtl/design/alu_ops.vh \
./rtl/design/arf.v \
./rtl/design/ram_sync.v \
./rtl/design/ram_sync_nolatch.v  \
./rtl/design/brimm_gen.v \
./rtl/design/constants.vh \
./rtl/design/decoder.v \
./rtl/design/dmem.v \
./rtl/design/exunit_alu.v \
./rtl/design/exunit_branch.v \
./rtl/design/exunit_ldst.v \
./rtl/design/exunit_mul.v \
./rtl/design/imem.v \
./rtl/design/imm_gen.v \
./rtl/design/pipeline_if.v \
./rtl/design/gshare.v \
./rtl/design/pipeline.v \
./rtl/design/oldest_finder.v \
./rtl/design/btb.v \
./rtl/design/prioenc.v \
./rtl/design/mpft.v \
./rtl/design/reorderbuf.v \
./rtl/design/rrf_freelistmanager.v \
./rtl/design/rrf.v \
./rtl/design/rs_alu.v \
./rtl/design/rs_branch.v \
./rtl/design/rs_ldst.v \
./rtl/design/rs_mul.v \
./rtl/design/rs_reqgen.v \
./rtl/design/rv32_opcodes.vh \
./rtl/design/src_manager.v \
./rtl/design/srcopr_manager.v \
./rtl/design/storebuf.v \
./rtl/design/tag_generator.v \
./rtl/design/dualport_ram.v \
./rtl/design/alu.v \
./rtl/design/multiplier.v \
./rtl/qed_files/inst_constraints.v \
./rtl/qed_files/modify_instruction.v \
./rtl/qed_files/properties.v \
./rtl/qed_files/qed_decoder.v \
./rtl/qed_files/qed_i_cache.v \
./rtl/qed_files/qed_instruction_mux.v \
./rtl/qed_files/qed.v \
./test_fm.sv;

# prep does a conservative elaboration of the top module provided
prep -top testbench;

# this command just does a sanity check of the hierarchy
hierarchy -check;

# translate processes to netlists
proc;

# flatten the design hierarchy
flatten;

# this processes memories
# nomap means it will keep them as arrays
memory;

#clk2fflogic;

async2sync;

chformal -lower;

# If an assumption is flopped, you might see strange behavior at the last state
# (because the clock hasn't toggled)
# this command ensures that assumptions hold at every state
chformal -assume -early;

opt -fast;

dffunmap;

# (optional) uncomment and set values to simulate reset signal
# use -resetn for an active low pin
# -n configures the number of cycles to simulate
# -rstlen configures how long the reset is active (recommended to keep it active for the whole simulation)
# -w tells it to write back the final state of the simulation as the initial state in the btor2 file
# another useful option is -zinit which zero initializes any uninitialized state
sim -clock din_clk -resetn din_rst_n -n 5 -rstlen 5 -zinit -w testbench;

# This turns all undriven signals into inputs
setundef -undriven -expose;

# This writes to a file in BTOR2 format
write_btor fsm.btor2
